【一】、非法字符：“\ufeff”解决办法
新引入项目的运行时提示"非法字符：“\ufeff” "，项目报错不能运行
出现原因：编码风格不一致
解决方案：
编码改为GBK格式，再转为UTF-8格式,重新启动项目问题解决；
操作步骤：
在IDEA右下角找到UTF-8字样的编码格式设计项，点击选择第一项GBK，然后Convert，等待项目覆盖结束；



【二】、java: 需要class, interface或enumIDEA解决方法
IDEA如果出现Error:(1, 10) java: 需要class, interface或enum
然后再选择GBK
再换回UTF-8
就行了

【三】、alt+insert在mac上的替代办法（构造）
command+n

【四】、Error:(16, 2) java: 解析时已到达文件结尾
解决方法：
       查看大括号是否匹配正确。

【五】、原因: java.lang.ClassNotFoundException
出现此类时，先考虑编码问题，其次尽量使用英语

【】Java 方法中加void和不加void的 区别
只要记住void即无返回值就OK了，如果不用void，那么这个地方一定是被一个其它的数据类型所替代，比如下面用的是String，当然也可能是int或者Boolean等等，那么此时我们下面就要有一个return返回值。
package com.Thursday.one;
public class Variable {
	public static void speaker(){
		System.out.println("你好");
	}
	public static String Talk(){
		return "hello";
	}
	public static void main(String[] args) {
		speaker();
		Talk();
		String aString = Talk();
		System.out.println(aString);
	}
}

【】intellij新建类
先建立一个Java class，然后打上去interface xxx（此处是类名），自动图标文件转为i


【】getter and setter作用
getter、setter是个很好的中间层。
这两个方法可以方便增加额外功能（比如验证）。
内部存储和外部表现不同。
可以保持外部接口不变的情况下，修改内部存储方式和逻辑。
任意管理变量的生命周期和内存存储方式。
提供一个debug接口。
能够和模拟对象、序列化乃至WPF库等融合。
允许继承者改变语义。
可以将getter、setter用于lambda表达式。（大概即作为一个函数，参与函数传递和运算）
getter和setter可以有不同的访问级别。
封装数据，对私有属性进行封装，只是暴露出public方法来访问。
但是为什么要这么做，原因很简单，封装的作用就是保护，保护属性本身不被篡改。
比如有些属性只是可读但不可写，那么只提供它的getter方法就好，意思就是某些属性只能单一方向的被访问，
getter和setter就是提供这样的接口，对于public的属性，可以直接使用类名来访问，自身的“安全性”就降低了。
 

setter方法
1.可以限制和检验setter方法传入的参数
2.隐藏对象内部数据结构
3.保持对象在每个状态的完整性
getter方法
1.按照客户的期望返回格式化数据
2.控制服务的顺序(例如只有当连接建立时getter方法才返回相应实例)
参考：http://stackoverflow.com/questions/7207994/java-setter-and-getter
框架中写的大部分getter和setter方法都是直接返回和赋值，不过实际上可以在方法中加入访问权限控制、逻辑判断等，实现OO编程中封装和信息隐藏。

其实说得明白点吧，这只是java类（特别的很多时候是一个javabean）的两个方法，以提供对某个变量（字段）设置与访问的两个入口，在很多时候也正如你说，跟定义成public是没有两样的，具体的原因在于：
（1）由于很多框架都是调用这两个方法来实现沟通，这是一种习惯了。
（2）get/set方法也不一定只是简单的作一个赋值，或一个返回值吧，在这里可以作一些权限的控制，比如不是每个角色都可以赋值的。再比如返回的值不一定是值本身，可以是经过处理了的，比如加密，这用public定义是不能作到的。
 

【】查看（方法）的源码
command+b，再按一次回去

【】可以这样总结，在调用成员变量以及静态方法时，“编译看左边，运行看左边”，
即程序编译时创建了一个Animal类型的对象，并且使用new Cat()对于这个Animal对象赋值，
但最终得到的还是一个Animal类的对象，只需要看“=”左边的Animal animal即可。

但是要调用非静态方法时，由于Animal类的对象是用Cat()来实例化的，
这个非静态方法在运行时会被重写，从而输出子类中方法重写后的结果。
这就是“编译看左边，运行看右边”。

【】public是一种访问权限修饰符，public中文翻译共有，
正如它的实际意思一样，在Java里面所有被public修饰的方法，类等都可以在任意其他地方调用。
main方法之所以是public，是因为一个Java程序在运行时首先创建一个JVM实例，
程序要运行需要调用main方法，JVM从外部调用main方法这就需要访问权限修饰符必须给出外部访问的权限，所以只能用public。

static的定义是为了JVM在调用main方法时不用实例化对象，
只需要在初始时加载main方法所在类，然后直接通过类名.main来调用main方法。

void表示main方法没有返回值，没有返回值的原因是因为Java不需要main方法向操作系统返回退出信息。
如果main方法正常退出，那么Java应用层序的退出代码为0，表示成功的运行了程序。

main的名称不能变是为了JVM能够识别程序运行的起点，main方法可以被重载，重载的main方法不会被执行。
main方法作为程序初始线程的起点，任何其他线程均由该线程启动。
JVM内部有两种线程，非守护线程和守护线程，main方法属于非守护线程，
守护线程通常由JVM自己使用，Java程序也可以表明自己的线程是守护线程。
当程序中所有的非守护线程终止时，JVM退出。也可以用Runtime类或者System.exit()来退出。

String[] args,是main方法中唯一可以改变的地方！args是arguments的缩写，
只是一个变量默认名，习惯性写作它，但是也可以改变的，只要符合命名规则随便你写成什么。
在使用集成开发工具的今天，String[] args更像是一种摆设了，很多初学者都不知道它的作用，其实它是程序运行传入的一个参数组。

【】java中的char类型

viafcccy 2018-12-19 20:31:15  775  收藏
分类专栏： java入门 java入门
char的初始化
char是Java中的保留字，与别的语言不同的是，char在Java中是16位的，因为Java用的是Unicode。不过8位的ASCII码包含在Unicode中，是从0~127的。
但是English，Spanish，German, French根本不需要这么表示，所以它们其实采用ASCII码会更高效。这中间就存在一个权衡问题。
因为char是16位的，采取的Unicode的编码方式，所以char就有以下的初始化方式：
//字符，可以是汉字，因为是Unicode编码
char c = 'c'; 
//可以用整数赋值
char c = 十进制数，八进制数，十六进制数等等;
//用字符的编码值来初始化
char c = '\u数字';
关于char占几个字节的问题
1.“字节”是byte，“位”是bit ；
2.1 byte = 8 bit ；
char 在Java中是2个字节。Java采用unicode，2个字节（16位）来表示一个字符。
char类型赋值 
char a = 'a';  //任意单个字符，加单引号。
char a = '中';//任意单个中文字，加单引号。
char a = 111;//整数。0~65535。十进制、八进制、十六进制均可。输出字符编码表中对应的字符。
注：char只能放单个字符。 

char运算
char类型是可以运算的因为char在ASCII等字符编码表中有对应的数值。
在Java中，对char类型字符运行时，直接当做ASCII表对应的整数来对待。
示例：
char m = 'a';
char m = 'a' + 'b';　  //char类型相加，提升为int类型，输出对应的字符。
int m = 'a' + 'b';　　  ——结果是195。//195没有超出int范围，直接输出195。
char m = 'a' + b;　　——会报错。//因为b是一个赋值的变量。
char m = 197;　　   //输出字符编码表中对应的字符。
char m = '197';　　   ——会报错。//因为有单引号，表示是字符，只允许放单个字符。
char m = 'a' + 1;　　——输出结果是b。//提升为int，计算结果98对应的字符是b。

总结
用单引号''标识，只能放单个字符。

char + char，char + int——类型均提升为int，附值char变量后，输出字符编码表中对应的字符。
