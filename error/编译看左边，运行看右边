可以这样总结，在调用成员变量以及静态方法时，“编译看左边，运行看左边”，
即程序编译时创建了一个Animal类型的对象，并且使用new Cat()对于这个Animal对象赋值，
但最终得到的还是一个Animal类的对象，只需要看“=”左边的Animal animal即可。

 

但是要调用非静态方法时，由于Animal类的对象是用Cat()来实例化的，
这个非静态方法在运行时会被重写，从而输出子类中方法重写后的结果。
这就是“编译看左边，运行看右边”。

